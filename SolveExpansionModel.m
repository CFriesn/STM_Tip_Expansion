function par = SolveExpansionModel(par)
%First, if we are not allowing a dynamic heat capacity, can just calc it
%once and use it after, to prevent unecessary calculations
if ~par.Model.DynamicC
    par.Model.Holder.V = pi*(par.Model.Holder.Radius^2)*par.Vars.Current(2);
    par.Model.Holder.Mass = par.Model.Holder.V * par.Model.Holder.Material.DensityFunc(293);
    
    par.Model.Tip.V = pi*(par.Model.Tip.Radius^2)*par.Vars.Current(3);
    par.Model.Tip.Mass = par.Model.Tip.V * par.Model.Tip.Material.DensityFunc(293);
    
    par.Vars.C_Tip = par.Model.Tip.Material.CFunc(par.Model.T_0)*par.Model.Tip.Mass;
    par.Vars.C_Holder = par.Model.Holder.Material.CFunc(par.Model.T_0)*par.Model.Holder.Mass;  
    par.Vars.C_System = par.Vars.C_Tip + par.Vars.C_Holder;
end

%First step is to solve for the temperature as a function of time
[par.Data.t_ModelData, par.Data.T_ModelData] = ode45(@Eval_dT, ...
    par.Vars.tspan, ...
    par.Model.T_0+par.Model.T_Offset, ...
    par.ODEOptions.odeopt, ...
    par);
%And we can calculate the differential linear expansion coefficients from
%this temperature curve for the tip and the holder, to be used in solving
%for dL.
par.Data.Alpha_Tip = par.Model.Tip.Material.LinExpFunc(par.Data.T_ModelData);
par.Data.Alpha_Holder = par.Model.Holder.Material.LinExpFunc(par.Data.T_ModelData);

par.Data.dT_ModelData = [diff(par.Data.T_ModelData)]./[diff(par.Data.t_ModelData)];
par.Data.dT_ModelData(end+1) = par.Data.dT_ModelData(end);

%Second, we take the temperature as a function of time, and solve for the
%length as a function of time
%Note: We will assume the tip and the holder have the same temperature, but
%we will need to solve for their expansion separately, then add the results
% [par.Data.t_TipExp, par.Data.Z_TipExp] = ode45(@Eval_dL_Tip, ...
%     par.Vars.tspan, ...
%     par.Vars.Current(3), ...
%     par.ODEOptions.odeopt, ...
%     par);
% 
% [par.Data.t_HolderExp, par.Data.Z_HolderExp] = ode45(@Eval_dL_Holder, ...
%     par.Vars.tspan, ...
%     par.Vars.Current(2), ...
%     par.ODEOptions.odeopt, ...
%     par);
% 
% %Finally, calculate the final model Z data, by interpolating both to same t
% %vector as the temperature data
% tmpTip = interp1(par.Data.t_TipExp,par.Data.Z_TipExp,par.Data.t_ModelData);
% tmpHolder = interp1(par.Data.t_HolderExp,par.Data.Z_HolderExp,par.Data.t_ModelData);

tipSol = ode45(@Eval_dL_Tip, ...
    par.Vars.tspan, ...
    par.Vars.Current(3) + par.Model.Tip.delZ_0, ...
    par.ODEOptions.odeopt, ...
    par);

holderSol = ode45(@Eval_dL_Holder, ...
    par.Vars.tspan, ...
    par.Vars.Current(2) + par.Model.Holder.delZ_0, ...
    par.ODEOptions.odeopt, ...
    par);

par.Data.Z_Tip = deval(tipSol,par.Data.t_ModelData);
par.Data.Z_Holder = deval(holderSol,par.Data.t_ModelData);
par.Data.Z_ModelData = ...
    ((par.Data.Z_Tip- par.Vars.Current(3)) + ...
    (par.Data.Z_Holder - par.Vars.Current(2)))*1E6;